import java.io.*;
import java.util.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

/*
Health & Fitness Tracker (Java)
SDG 3 — Good Health and Well-Being

Features:
 - Console-based menu
 - Add daily health records (date, steps, calories, sleep hours, weight)
 - View all records
 - View summary statistics (average steps, avg sleep, total calories)
 - Save/load records to CSV (data/records.csv)
 - Simple BMI calculation from most recent weight and stored height

Author: Generated by ChatGPT
*/

public class Main {
    static final String CSV_FILE = "data/records.csv";
    static final Scanner scanner = new Scanner(System.in);
    static final DateTimeFormatter DF = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    static class Record {
        LocalDate date;
        int steps;
        int calories;
        double sleepHours;
        double weightKg; // kg
        Record(LocalDate d, int s, int c, double sh, double w) {
            date = d; steps = s; calories = c; sleepHours = sh; weightKg = w;
        }
    }

    static List<Record> records = new ArrayList<>();
    static double userHeightMeters = 1.70; // default - user can change in profile
    static String userName = "User";

    public static void main(String[] args) {
        loadProfile();
        loadRecords();
        menu();
        saveRecords();
        saveProfile();
        System.out.println("Goodbye — stay healthy!");
    }

    static void menu() {
        while (true) {
            System.out.println("\\n=== Health & Fitness Tracker (SDG 3) ===");
            System.out.println("User: " + userName + " | Height: " + userHeightMeters + " m");
            System.out.println("1. Add daily record");
            System.out.println("2. View all records");
            System.out.println("3. View summary statistics");
            System.out.println("4. Calculate BMI (latest weight)");
            System.out.println("5. Set user profile (name, height in meters)");
            System.out.println("6. Save now");
            System.out.println("7. Exit");
            System.out.print("Choice: ");
            String line = scanner.nextLine().trim();
            switch (line) {
                case "1": addRecord(); break;
                case "2": viewRecords(); break;
                case "3": viewSummary(); break;
                case "4": calcBMI(); break;
                case "5": setProfile(); break;
                case "6": saveRecords(); saveProfile(); System.out.println("Saved."); break;
                case "7": return;
                default: System.out.println("Invalid choice."); break;
            }
        }
    }

    static void addRecord() {
        try {
            System.out.print("Date (YYYY-MM-DD) [default today]: ");
            String d = scanner.nextLine().trim();
            LocalDate date = d.isEmpty() ? LocalDate.now() : LocalDate.parse(d, DF);
            System.out.print("Steps: ");
            int steps = Integer.parseInt(scanner.nextLine().trim());
            System.out.print("Calories (kcal): ");
            int cal = Integer.parseInt(scanner.nextLine().trim());
            System.out.print("Sleep hours: ");
            double sleep = Double.parseDouble(scanner.nextLine().trim());
            System.out.print("Weight (kg): ");
            double w = Double.parseDouble(scanner.nextLine().trim());
            records.add(new Record(date, steps, cal, sleep, w));
            System.out.println("Record added.");
        } catch (Exception e) {
            System.out.println("Invalid input, record not added. " + e.getMessage());
        }
    }

    static void viewRecords() {
        if (records.isEmpty()) {
            System.out.println("No records available.");
            return;
        }
        System.out.printf("%-12s | %-7s | %-9s | %-10s | %-7s%n", "Date", "Steps", "Calories", "Sleep (h)", "Weight");
        System.out.println("-----------------------------------------------------------------");
        records.sort(Comparator.comparing(r -> r.date));
        for (Record r : records) {
            System.out.printf("%s | %-7d | %-9d | %-10.2f | %-7.2f%n", r.date.format(DF), r.steps, r.calories, r.sleepHours, r.weightKg);
        }
    }

    static void viewSummary() {
        if (records.isEmpty()) {
            System.out.println("No records to summarise.");
            return;
        }
        double avgSteps=0, avgSleep=0, totalCalories=0;
        for (Record r : records) {
            avgSteps += r.steps;
            avgSleep += r.sleepHours;
            totalCalories += r.calories;
        }
        avgSteps /= records.size();
        avgSleep /= records.size();
        System.out.println("Summary for " + records.size() + " records:");
        System.out.printf("Average steps/day: %.0f%n", avgSteps);
        System.out.printf("Average sleep (hours): %.2f%n", avgSleep);
        System.out.printf("Total calories (kcal): %.0f%n", totalCalories);
    }

    static void calcBMI() {
        if (records.isEmpty()) {
            System.out.println("No weight data available.");
            return;
        }
        Record latest = Collections.max(records, Comparator.comparing(r -> r.date));
        double bmi = latest.weightKg / (userHeightMeters * userHeightMeters);
        System.out.printf("Latest weight: %.2f kg (Date: %s)%n", latest.weightKg, latest.date.format(DF));
        System.out.printf("BMI: %.2f — %s%n", bmi, bmiCategory(bmi));
    }

    static String bmiCategory(double bmi) {
        if (bmi < 18.5) return "Underweight";
        if (bmi < 25.0) return "Normal weight";
        if (bmi < 30.0) return "Overweight";
        return "Obesity";
    }

    static void setProfile() {
        try {
            System.out.print("Enter name: ");
            String name = scanner.nextLine().trim();
            if (!name.isEmpty()) userName = name;
            System.out.print("Enter height in meters (e.g., 1.70): ");
            String h = scanner.nextLine().trim();
            if (!h.isEmpty()) userHeightMeters = Double.parseDouble(h);
            System.out.println("Profile updated.");
        } catch (Exception e) {
            System.out.println("Invalid input, profile not changed.");
        }
    }

    static void loadRecords() {
        File f = new File(CSV_FILE);
        if (!f.exists()) return;
        try (BufferedReader br = new BufferedReader(new FileReader(f))) {
            String line = br.readLine(); // header
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length < 5) continue;
                LocalDate d = LocalDate.parse(parts[0], DF);
                int s = Integer.parseInt(parts[1]);
                int c = Integer.parseInt(parts[2]);
                double sh = Double.parseDouble(parts[3]);
                double w = Double.parseDouble(parts[4]);
                records.add(new Record(d, s, c, sh, w));
            }
        } catch (Exception e) {
            System.out.println("Failed to load records: " + e.getMessage());
        }
    }

    static void saveRecords() {
        try (PrintWriter pw = new PrintWriter(new FileWriter(CSV_FILE))) {
            pw.println("date,steps,calories,sleep_hours,weight_kg");
            for (Record r : records) {
                pw.printf("%s,%d,%d,%.2f,%.2f%n", r.date.format(DF), r.steps, r.calories, r.sleepHours, r.weightKg);
            }
        } catch (Exception e) {
            System.out.println("Failed to save records: " + e.getMessage());
        }
    }

    static void loadProfile() {
        File f = new File("data/profile.cfg");
        if (!f.exists()) return;
        try (BufferedReader br = new BufferedReader(new FileReader(f))) {
            userName = br.readLine();
            String h = br.readLine();
            if (h != null) userHeightMeters = Double.parseDouble(h);
        } catch (Exception e) {
            // ignore
        }
    }

    static void saveProfile() {
        try (PrintWriter pw = new PrintWriter(new FileWriter("data/profile.cfg"))) {
            pw.println(userName);
            pw.println(userHeightMeters);
        } catch (Exception e) {
            // ignore
        }
    }
}